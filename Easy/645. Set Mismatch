//----------------------------------------------------------------------------
//-----------------------------------Bruteforce--------------------------------

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int dup=-1,miss=-1;
        for(int i=1;i<=nums.size();i++){
            int count=0;
            for(int j=0;j<nums.size();j++){
                if(nums[j]==i)
                    count++;
            }
            if(count==2)
                dup=i;
            else if(count==0)
                miss=i;
        }
        return {dup,miss};
    }
};

//----------------------------------------------------------------------------
//-----------------------------------Maths------------------------------------

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int expectedSum=n*(n+1)/2;
        int currentSum=0,uniqueSum=0;

        for(int i:nums) currentSum+=i;
        
        set<int>s(nums.begin(),nums.end());
        for(auto i:s) uniqueSum+=i;

        int repeated=currentSum-uniqueSum;
        int missing=expectedSum-uniqueSum;

        return {repeated,missing};
    }
};

//----------------------------------------------------------------------------
//-----------------------------------Maps-------------------------------------

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int>m;
        for(int i=1;i<=n;i++)m[i]++;

        for(auto i:nums)m[i]--;

        int dup=0,miss=0;

        for(auto i:m){
            if(i.second==-1)dup=i.first;
            if(i.second==1)miss=i.first;
        }

        return {dup,miss};
    }
};
