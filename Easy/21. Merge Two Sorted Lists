//method 1-----------------------------------------------------------------------(C)
//-------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2)
{
    if(list1==NULL&&list2==NULL)
        return NULL;
    if(list1==NULL)
        return list2;
    if(list2==NULL)
        return list1;
    struct ListNode* last, *third;
    if(list1->val<list2->val)
    {
        third=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
    }
    else
    {
        third=list2;
        last=list2;
        list2=list2->next;
        last->next=NULL;
    }
    while(list1!=NULL&&list2!=NULL)
    {
        if(list1->val<list2->val)
        {
        last->next=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
        }
        else
        {
            last->next=list2;
            last=list2;
            list2=list2->next;
            last->next=NULL;
        }
    }
    while(list1!=NULL)
    {
        last->next=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
    }
    while(list2!=NULL)
    {
        last->next=list2;
        last=list2;
        list2=list2->next;
        last->next=NULL;
    }
    return third;


}

//method 2--------------------------------------------------(C++)
//----------------------------------------------------------

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)return list2;
        if(list2==NULL)return list1;
        
        ListNode *ans,*tail;

        if(list1->val<list2->val)
        {
            ans=list1;
            tail=list1;
            list1=list1->next;
        }
        else
        {
            ans=list2;
            tail=list2;
            list2=list2->next;
        }
        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val<list2->val)
            {
                tail->next=list1;
                tail=list1;
                list1=list1->next;
            }
            else
            {
                tail->next=list2;
                tail=list2;
                list2=list2->next;
            }
        }

        if(list1) tail->next=list1;
        else tail->next=list2;

        return ans;
    }
};


//method 3---------------------------------------------------(C++)
//-----------------------------------------------------------

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)return list2;
        if(list2==NULL)return list1;

        ListNode *ans=new ListNode(-1);
        ListNode *tail=ans;
        
        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val<list2->val)
            {
                tail->next=list1;
                tail=list1;
                list1=list1->next;
            }
            else
            {
                tail->next=list2;
                tail=list2;
                list2=list2->next;
            }
        }

        if(list1) tail->next=list1;
        else tail->next=list2;

        return ans->next;
    }
};
