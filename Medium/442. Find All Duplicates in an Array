class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int>ans;

        for(int i=0;i<nums.size()-1;i++){
            if(!(nums[i]^nums[i+1]))
                ans.push_back(nums[i]);
        }

        return ans;
    }
};

//--------------------------O(n)--------------------------

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>ans;

        for(int i=0;i<nums.size();i++){
            int num=abs(nums[i]);
            int idx=num-1;
            if(nums[idx]<0) ans.push_back(num);
            nums[idx]=-nums[idx];
        }

        return ans;
    }
};

//--------------------------same-------------------------

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>ans;

        for(int i=0;i<nums.size();i++){
            if(nums[abs(nums[i])-1]<0) ans.push_back(abs(nums[i]));
            nums[abs(nums[i])-1]*=-1;
        }

        return ans;
    }
};

//---------------------------hehe-----------------------

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>ans;for(int i=0;i<nums.size();i++){if(nums[abs(nums[i])-1]<0){ans.push_back(abs(nums[i]));}nums[abs(nums[i])-1]*=-1;}return ans;
    }
};
