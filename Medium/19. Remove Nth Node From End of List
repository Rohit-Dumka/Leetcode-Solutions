/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeNthFromEnd(struct ListNode* head, int n){
    struct ListNode* curr=head;
    struct ListNode* temp=NULL;
    struct ListNode* curr2=head;
    int s=0;
    
    while(curr!=NULL)
    {
        s++;
        curr=curr->next;
    }
    int pos=s-n+1;

    if(head->next==NULL)
        return NULL;
    if(n==s)
        return head->next;
    else
    {
    for(int i=1;i<pos;i++)
    {
        temp=curr2;
        curr2=curr2->next;
    }
    temp->next=curr2->next;
    
    }
    return head;

}
//----------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* len=head;
        ListNode * curr=head;
        ListNode *pre=NULL;
        int l=0;
        while(len!=NULL){
            len=len->next;
            l++;
        }
        int pos=l-n+1;
        if(n==l)
            return head->next;
        if(n>l)
            return head;

        while(pos!=1){
            pre=curr;
            curr=curr->next;
            pos--;
        }
        pre->next=curr->next;
        return head;
    }
};
