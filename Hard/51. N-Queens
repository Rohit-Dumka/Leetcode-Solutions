class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> arr(n, string(n, '.'));

        queenTry(ans, arr, 0, n);
        return ans;
    }

    void queenTry(vector<vector<string>>& ans, vector<string>& arr, int row, int n) {
        if (row == arr.size()) {
            ans.push_back(arr);
            return;
        }
        for (int col = 0; col < arr.size(); col++) {
            if (safe(arr, col, n, row)) {
                arr[row][col] = 'Q';
                queenTry(ans, arr, row + 1, n);
                arr[row][col] = '.';
            }
        }
    }

    bool safe(const vector<string>& arr, int c, int n, int r) {
        for (int k = 0; k < n; k++) {
            if (arr[r][k] == 'Q' || arr[k][c] == 'Q') {
                return false;
            }
        }
        for(int l=0;l<n;l++){ //diagonal check
            if(inbound(r-l,c-l,n) && arr[r-l][c-l]=='Q') return false;
            if(inbound(r+l,c-l,n) && arr[r+l][c-l]=='Q') return false;
            if(inbound(r+l,c+l,n) && arr[r+l][c+l]=='Q') return false;
            if(inbound(r-l,c+l,n) && arr[r-l][c+l]=='Q') return false;
        }
        return true;
    }
     bool inbound(int i,int j, int n){
        if(i<0 || j<0  || i>=n || j>=n ) return false;
        return true;
    }
};
